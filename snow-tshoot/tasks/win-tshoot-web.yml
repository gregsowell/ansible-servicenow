---
# resolve client IP address
  - name: copy clientip file
    win_template:
      src: clientip.j2
      dest: C:\scripts\clientip.ps1

  - name: Resolve client name
    win_shell: powershell C:\scripts\clientip.ps1
    register: client_ip

#  - name: debug to print client_ip
#    debug:
#      var: client_ip

# once the IP resolves correctly do the below block
  - name: block when IP resolves
    when: client_ip.stderr == ""
    block:
    - name: copy webip file
      win_template:
        src: webip.j2
        dest: C:\scripts\webip.ps1

# find the IP address of the service as per the client
# ^(?:https?:)?(?:\/\/)?(?:[^@\n]+@)?(?:www\.)?([^:\/\n]+)
    - name: Find URL or website
      win_shell: 'powershell Invoke-Command -ComputerName {{ test_client }} -FilePath C:\scripts\webip.ps1'
      register: web_ip
      failed_when: "'Address' not in web_ip.stdout"

#    - name: debug to print web_ip
#      debug:
#        var: web_ip

    - name: set web IP variable
      set_fact:
        web_ip_y: "{{ web_ip.stdout_lines[0] | from_yaml }}"

#    - name: debug to print web_ip_y
#      debug:
#        var: web_ip_y

    - name: copy curl file
      win_template:
        src: curltest.j2
        dest: C:\scripts\curltest.ps1

    - name: Test browsing from affected user
      win_shell: 'powershell Invoke-Command -ComputerName {{ test_client }} -FilePath C:\scripts\curltest.ps1'
      register: web_test1
      failed_when: "'status_code' not in web_test1.stdout"

#    - name: debug to print web_test1
#      debug:
#        var: web_test1

    - name: save web_test1 as yaml
      set_fact: 
        web_test1_y: "{{ web_test1.stdout | from_yaml }}"

#    - name: debug to print web_test1_y
#      debug:
#        var: web_test1_y

    - name: Test browsing from windows control node
      win_shell: powershell C:\scripts\curltest.ps1
      register: web_test2
      failed_when: "'status_code' not in web_test2.stdout"

#    - name: debug to print web_test
#      debug:
#        var: web_test2

    - name: save web_test2 as yaml
      set_fact: 
        web_test2_y: "{{ web_test2.stdout | from_yaml }}"

#    - name: debug to print web_test_y
#      debug:
#        var: web_test2_y

    - name: Test browsing from outside canary 
      win_shell: 'powershell Invoke-Command -ComputerName {{ test_canary }} -FilePath C:\scripts\curltest.ps1'
      register: web_test3
      failed_when: "'status_code' not in web_test3.stdout"

#    - name: debug to print web_test3
#      debug:
#        var: web_test3

    - name: save web_test3 as yaml
      set_fact: 
        web_test3_y: "{{ web_test3.stdout | from_yaml }}"

#    - name: debug to print web_test3_y
#      debug:
#        var: web_test3_y

    - name: check firewall if either fails above and is https
      when: 
        - (web_test1_y.status_code != 200 or web_test2_y.status_code != 200)
        - "'https:' in test_url"
      delegate_to: asav
      asa_command: 
        commands:
          - "packet-tracer input inside tcp {{ client_ip.stdout_lines[0] }} 30000 {{ web_ip_y.Address }} https"
      register: firewall_res_https

#    - name: print firewall_res_https if it exists
#      when: firewall_res_https is defined
#      debug:
#        var: firewall_res_https

    - name: check firewall if either fails above and is http
      when: 
        - (web_test1_y.status_code != 200 or web_test2_y.status_code != 200)
        - firewall_res_https.stdout is undefined
      delegate_to: asav
      asa_command: 
        commands:
          - "packet-tracer input inside tcp {{ client_ip.stdout_lines[0] }} 30000 {{ web_ip_y.Address }} http"
      register: firewall_res_http

#    - name: print firewall_res if it exists
#      when: firewall_res_http is defined
#      debug:
#        var: firewall_res_http

# !!!!!! Block for result actions !!!!!!!!!!!
    - name: all worked
      when: 
        - web_test1_y.status_code == 200
        - web_test2_y.status_code == 200
        - web_test3_y.status_code == 200
        - web_test2_y.raw_length < web_test3_y.raw_length + 10
        - web_test2_y.raw_length > web_test3_y.raw_length - 10
#      debug:
#        msg: All tests clean - tell customer - set to help desk
      set_fact:
        res_message: Automation shows all tests pass successfully, please attempt your connection again
        res_group: Help Desk


    - name: block for http
      when: firewall_res_http.stdout is defined
      block:
        - name: client fails everything else works
          when: 
            - web_test1_y.status_code != 200
            - web_test2_y.status_code == 200
            - web_test3_y.status_code == 200
            - web_test2_y.raw_length < web_test3_y.raw_length + 10
            - web_test2_y.raw_length > web_test3_y.raw_length - 10
            - firewall_res_http.stdout is search("allow")
#          debug:
#            msg: Client fails all else works - set to service desk
          set_fact:
            res_message: Automation shows client fails, but all else works
            res_group: Service Desk

        - name: client/firewall fails but others work
          when: 
            - web_test1_y.status_code != 200
            - web_test2_y.status_code == 200
            - web_test3_y.status_code == 200
            - web_test2_y.raw_length < web_test3_y.raw_length + 10
            - web_test2_y.raw_length > web_test3_y.raw_length - 10
            - firewall_res_http.stdout is not search("allow")
#          debug:
#            msg: Client/firewall fails all else works - set to network
          set_fact:
            res_message: Automation shows client/firewall fails, all else works
            res_group: Network

        - name: client/control fails but external passes
          when: 
            - web_test1_y.status_code != 200
            - web_test2_y.status_code != 200
            - web_test3_y.status_code == 200
            - firewall_res_http.stdout is search("allow")
#          debug:
#            msg: Client/control fails external works - set to network
          set_fact:
            res_message: Automation shows client/control fails, but external works
            res_group: Network

        - name: client/control get 200 but external size difference greater than 100 bytes firewall allow
          when: 
            - web_test1_y.status_code == 200
            - web_test2_y.status_code == 200
            - web_test3_y.status_code == 200
            - web_test2_y.raw_length > web_test3_y.raw_length + 99 or web_test2_y.raw_length < web_test3_y.raw_length - 99
            - firewall_res_http.stdout not search("allow")
#          debug:
#            msg: client/control get 200 but external size difference greater than 100 bytes firewall allow - set to network
          set_fact:
            res_message: Automation shows client/control get 200, but external shows variance in file size
            res_group: Network


    - name: block for https
      when: firewall_res_https.stdout is defined
      block:
        - name: client fails everything else works
          when: 
            - web_test1_y.status_code != 200
            - web_test2_y.status_code == 200
            - web_test3_y.status_code == 200
            - web_test2_y.raw_length < web_test3_y.raw_length + 10
            - web_test2_y.raw_length > web_test3_y.raw_length - 10
#            - "'allow' in firewall_res_https.stdout"
#            - firewall_res_https.stdout.find('allow') != -1
            - firewall_res_https.stdout is search("allow")
#          debug:
#            msg: Client fails all else works - set to service desk
          set_fact:
            res_message: Automation shows client fails, but all else works
            res_group: Service Desk

        - name: client/firewall fails but others work
          when: 
            - web_test1_y.status_code != 200
            - web_test2_y.status_code == 200
            - web_test3_y.status_code == 200
            - web_test2_y.raw_length < web_test3_y.raw_length + 10
            - web_test2_y.raw_length > web_test3_y.raw_length - 10
            - firewall_res_https.stdout is not search("allow")
#          debug:
#            msg: Client/firewall fails all else works - set to network
          set_fact:
            res_message: Automation shows client/firewall fails, but all else works
            res_group: Network

        - name: client/control fails but external passes
          when: 
            - web_test1_y.status_code != 200
            - web_test2_y.status_code != 200
            - web_test3_y.status_code == 200
            - firewall_res_https.stdout is search("allow")
#          debug:
#            msg: Client/control fails external works - set to network
          set_fact:
            res_message: Automation shows client/control fails, but all else works
            res_group: Network

        - name: client/control get 200 but external size difference greater than 100 bytes firewall allow
          when: 
            - web_test1_y.status_code == 200
            - web_test2_y.status_code == 200
            - web_test3_y.status_code == 200
            - web_test2_y.raw_length > web_test3_y.raw_length + 99 or web_test2_y.raw_length < web_test3_y.raw_length - 99
            - firewall_res_https.stdout not search("Action: allow")
#          debug:
#            msg: client/control get 200 but external size difference greater than 100 bytes firewall allow - set to network
          set_fact:
            res_message: Automation shows client/control get 200, but external shows variance in file size
            res_group: Network
